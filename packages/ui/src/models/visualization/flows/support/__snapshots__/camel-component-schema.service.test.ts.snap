// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CamelComponentSchemaService getVisualComponentSchema should build the appropriate schema for processors combined that holds a component 1`] = `
{
  "definition": {
    "id": "to-3044",
    "parameters": {
      "groupActiveOnly": true,
      "level": "ERROR",
      "logMask": true,
    },
    "uri": "log",
  },
  "schema": {
    "additionalProperties": false,
    "description": "Sends the message to a static endpoint",
    "properties": {
      "description": {
        "description": "Sets the description of this node",
        "title": "Description",
        "type": "string",
      },
      "disabled": {
        "description": "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
        "title": "Disabled",
        "type": "boolean",
      },
      "id": {
        "description": "Sets the id of this node",
        "title": "Id",
        "type": "string",
      },
      "parameters": {
        "description": "Endpoint properties description",
        "properties": {
          "exchangeFormatter": {
            "$comment": "class:org.apache.camel.spi.ExchangeFormatter",
            "deprecated": false,
            "description": "To use a custom exchange formatter",
            "title": "Exchange Formatter",
            "type": "string",
          },
          "groupActiveOnly": {
            "default": "true",
            "deprecated": false,
            "description": "If true, will hide stats when no new messages have been received for a time interval, if false, show stats regardless of message traffic.",
            "title": "Group Active Only",
            "type": "boolean",
          },
          "groupDelay": {
            "deprecated": false,
            "description": "Set the initial delay for stats (in millis)",
            "title": "Group Delay",
            "type": "integer",
          },
          "groupInterval": {
            "deprecated": false,
            "description": "If specified will group message stats by this time interval (in millis)",
            "title": "Group Interval",
            "type": "integer",
          },
          "groupSize": {
            "deprecated": false,
            "description": "An integer that specifies a group size for throughput logging.",
            "title": "Group Size",
            "type": "integer",
          },
          "lazyStartProducer": {
            "default": false,
            "deprecated": false,
            "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
            "title": "Lazy Start Producer",
            "type": "boolean",
          },
          "level": {
            "default": "INFO",
            "deprecated": false,
            "description": "Logging level to use. The default value is INFO.",
            "enum": [
              "TRACE",
              "DEBUG",
              "INFO",
              "WARN",
              "ERROR",
              "OFF",
            ],
            "title": "Level",
            "type": "string",
          },
          "logMask": {
            "deprecated": false,
            "description": "If true, mask sensitive information like password or passphrase in the log.",
            "title": "Log Mask",
            "type": "boolean",
          },
          "loggerName": {
            "deprecated": false,
            "description": "Name of the logging category to use",
            "title": "Logger Name",
            "type": "string",
          },
          "marker": {
            "deprecated": false,
            "description": "An optional Marker name to use.",
            "title": "Marker",
            "type": "string",
          },
          "maxChars": {
            "default": 10000,
            "deprecated": false,
            "description": "Limits the number of characters logged per line.",
            "title": "Max Chars",
            "type": "integer",
          },
          "multiline": {
            "default": false,
            "deprecated": false,
            "description": "If enabled then each information is outputted on a newline.",
            "title": "Multiline",
            "type": "boolean",
          },
          "plain": {
            "default": false,
            "deprecated": false,
            "description": "If enabled only the body will be printed out",
            "title": "Plain",
            "type": "boolean",
          },
          "showAll": {
            "default": false,
            "deprecated": false,
            "description": "Quick option for turning all options on. (multiline, maxChars has to be manually set if to be used)",
            "title": "Show All",
            "type": "boolean",
          },
          "showAllProperties": {
            "default": false,
            "deprecated": false,
            "description": "Show all of the exchange properties (both internal and custom).",
            "title": "Show All Properties",
            "type": "boolean",
          },
          "showBody": {
            "default": true,
            "deprecated": false,
            "description": "Show the message body.",
            "title": "Show Body",
            "type": "boolean",
          },
          "showBodyType": {
            "default": true,
            "deprecated": false,
            "description": "Show the body Java type.",
            "title": "Show Body Type",
            "type": "boolean",
          },
          "showCachedStreams": {
            "default": true,
            "deprecated": false,
            "description": "Whether Camel should show cached stream bodies or not (org.apache.camel.StreamCache).",
            "title": "Show Cached Streams",
            "type": "boolean",
          },
          "showCaughtException": {
            "default": false,
            "deprecated": false,
            "description": "If the exchange has a caught exception, show the exception message (no stack trace). A caught exception is stored as a property on the exchange (using the key org.apache.camel.Exchange#EXCEPTION_CAUGHT) and for instance a doCatch can catch exceptions.",
            "title": "Show Caught Exception",
            "type": "boolean",
          },
          "showException": {
            "default": false,
            "deprecated": false,
            "description": "If the exchange has an exception, show the exception message (no stacktrace)",
            "title": "Show Exception",
            "type": "boolean",
          },
          "showExchangeId": {
            "default": false,
            "deprecated": false,
            "description": "Show the unique exchange ID.",
            "title": "Show Exchange Id",
            "type": "boolean",
          },
          "showExchangePattern": {
            "default": false,
            "deprecated": false,
            "description": "Shows the Message Exchange Pattern (or MEP for short).",
            "title": "Show Exchange Pattern",
            "type": "boolean",
          },
          "showFiles": {
            "default": false,
            "deprecated": false,
            "description": "If enabled Camel will output files",
            "title": "Show Files",
            "type": "boolean",
          },
          "showFuture": {
            "default": false,
            "deprecated": false,
            "description": "If enabled Camel will on Future objects wait for it to complete to obtain the payload to be logged.",
            "title": "Show Future",
            "type": "boolean",
          },
          "showHeaders": {
            "default": false,
            "deprecated": false,
            "description": "Show the message headers.",
            "title": "Show Headers",
            "type": "boolean",
          },
          "showProperties": {
            "default": false,
            "deprecated": false,
            "description": "Show the exchange properties (only custom). Use showAllProperties to show both internal and custom properties.",
            "title": "Show Properties",
            "type": "boolean",
          },
          "showRouteGroup": {
            "default": false,
            "deprecated": false,
            "description": "Show route Group.",
            "title": "Show Route Group",
            "type": "boolean",
          },
          "showRouteId": {
            "default": false,
            "deprecated": false,
            "description": "Show route ID.",
            "title": "Show Route Id",
            "type": "boolean",
          },
          "showStackTrace": {
            "default": false,
            "deprecated": false,
            "description": "Show the stack trace, if an exchange has an exception. Only effective if one of showAll, showException or showCaughtException are enabled.",
            "title": "Show Stack Trace",
            "type": "boolean",
          },
          "showStreams": {
            "default": false,
            "deprecated": false,
            "description": "Whether Camel should show stream bodies or not (eg such as java.io.InputStream). Beware if you enable this option then you may not be able later to access the message body as the stream have already been read by this logger. To remedy this you will have to use Stream Caching.",
            "title": "Show Streams",
            "type": "boolean",
          },
          "skipBodyLineSeparator": {
            "default": true,
            "deprecated": false,
            "description": "Whether to skip line separators when logging the message body. This allows to log the message body in one line, setting this option to false will preserve any line separators from the body, which then will log the body as is.",
            "title": "Skip Body Line Separator",
            "type": "boolean",
          },
          "sourceLocationLoggerName": {
            "default": false,
            "deprecated": false,
            "description": "If enabled then the source location of where the log endpoint is used in Camel routes, would be used as logger name, instead of the given name. However, if the source location is disabled or not possible to resolve then the existing logger name will be used.",
            "title": "Source Location Logger Name",
            "type": "boolean",
          },
          "style": {
            "default": "Default",
            "deprecated": false,
            "description": "Sets the outputs style to use.",
            "enum": [
              "Default",
              "Tab",
              "Fixed",
            ],
            "title": "Style",
            "type": "string",
          },
        },
        "required": [
          "loggerName",
        ],
        "title": "Endpoint Properties",
        "type": "object",
      },
      "pattern": {
        "description": "Sets the optional ExchangePattern used to invoke this endpoint",
        "enum": [
          "InOnly",
          "InOut",
        ],
        "title": "Pattern",
        "type": "string",
      },
    },
    "title": "To",
    "type": "object",
  },
  "title": "to",
}
`;

exports[`CamelComponentSchemaService getVisualComponentSchema should build the appropriate schema for standalone processors 1`] = `
{
  "definition": {
    "message": "Hello World",
  },
  "schema": {
    "additionalProperties": false,
    "description": "Logs the defined message to the logger",
    "properties": {
      "description": {
        "description": "Sets the description of this node",
        "title": "Description",
        "type": "string",
      },
      "disabled": {
        "description": "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
        "title": "Disabled",
        "type": "boolean",
      },
      "id": {
        "description": "Sets the id of this node",
        "title": "Id",
        "type": "string",
      },
      "logName": {
        "description": "Sets the name of the logger",
        "title": "Log Name",
        "type": "string",
      },
      "logger": {
        "$comment": "class:org.slf4j.Logger",
        "description": "To refer to a custom logger instance to lookup from the registry.",
        "title": "Logger",
        "type": "string",
      },
      "loggingLevel": {
        "default": "INFO",
        "description": "Sets the logging level. The default value is INFO",
        "enum": [
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "OFF",
        ],
        "title": "Logging Level",
        "type": "string",
      },
      "marker": {
        "description": "To use slf4j marker",
        "title": "Marker",
        "type": "string",
      },
      "message": {
        "description": "Sets the log message (uses simple language)",
        "title": "Message",
        "type": "string",
      },
    },
    "title": "Log",
    "type": "object",
  },
  "title": "log",
}
`;

exports[`CamelComponentSchemaService getVisualComponentSchema should not build a schema for an unknown component 1`] = `
{
  "definition": {
    "id": "to-3044",
    "parameters": {
      "level": "ERROR",
    },
    "uri": "non-existing-component",
  },
  "schema": {
    "additionalProperties": false,
    "description": "Sends the message to a static endpoint",
    "properties": {
      "description": {
        "description": "Sets the description of this node",
        "title": "Description",
        "type": "string",
      },
      "disabled": {
        "description": "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
        "title": "Disabled",
        "type": "boolean",
      },
      "id": {
        "description": "Sets the id of this node",
        "title": "Id",
        "type": "string",
      },
      "pattern": {
        "description": "Sets the optional ExchangePattern used to invoke this endpoint",
        "enum": [
          "InOnly",
          "InOut",
        ],
        "title": "Pattern",
        "type": "string",
      },
    },
    "title": "To",
    "type": "object",
  },
  "title": "to",
}
`;

exports[`CamelComponentSchemaService getVisualComponentSchema should transform a string-based \`Log\` processor 1`] = `
{
  "definition": {
    "message": "\${body}",
  },
  "schema": {
    "additionalProperties": false,
    "description": "Logs the defined message to the logger",
    "properties": {
      "description": {
        "description": "Sets the description of this node",
        "title": "Description",
        "type": "string",
      },
      "disabled": {
        "description": "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
        "title": "Disabled",
        "type": "boolean",
      },
      "id": {
        "description": "Sets the id of this node",
        "title": "Id",
        "type": "string",
      },
      "logName": {
        "description": "Sets the name of the logger",
        "title": "Log Name",
        "type": "string",
      },
      "logger": {
        "$comment": "class:org.slf4j.Logger",
        "description": "To refer to a custom logger instance to lookup from the registry.",
        "title": "Logger",
        "type": "string",
      },
      "loggingLevel": {
        "default": "INFO",
        "description": "Sets the logging level. The default value is INFO",
        "enum": [
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "OFF",
        ],
        "title": "Logging Level",
        "type": "string",
      },
      "marker": {
        "description": "To use slf4j marker",
        "title": "Marker",
        "type": "string",
      },
      "message": {
        "description": "Sets the log message (uses simple language)",
        "title": "Message",
        "type": "string",
      },
    },
    "title": "Log",
    "type": "object",
  },
  "title": "log",
}
`;

exports[`CamelComponentSchemaService getVisualComponentSchema should transform a string-based \`To\` processor 1`] = `
{
  "definition": {
    "parameters": {
      "beanName": "myBean",
      "method": "hello",
    },
    "uri": "bean",
  },
  "schema": {
    "additionalProperties": false,
    "description": "Sends the message to a static endpoint",
    "properties": {
      "description": {
        "description": "Sets the description of this node",
        "title": "Description",
        "type": "string",
      },
      "disabled": {
        "description": "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
        "title": "Disabled",
        "type": "boolean",
      },
      "id": {
        "description": "Sets the id of this node",
        "title": "Id",
        "type": "string",
      },
      "parameters": {
        "description": "Endpoint properties description",
        "properties": {
          "beanName": {
            "deprecated": false,
            "description": "Sets the name of the bean to invoke",
            "title": "Bean Name",
            "type": "string",
          },
          "lazyStartProducer": {
            "default": false,
            "deprecated": false,
            "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
            "title": "Lazy Start Producer",
            "type": "boolean",
          },
          "method": {
            "deprecated": false,
            "description": "Sets the name of the method to invoke on the bean",
            "title": "Method",
            "type": "string",
          },
          "parameters": {
            "deprecated": false,
            "description": "Used for configuring additional properties on the bean",
            "title": "Parameters",
            "type": "object",
          },
          "scope": {
            "default": "Singleton",
            "deprecated": false,
            "description": "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. so when using prototype then this depends on the delegated registry.",
            "enum": [
              "Singleton",
              "Request",
              "Prototype",
            ],
            "title": "Scope",
            "type": "string",
          },
        },
        "required": [
          "beanName",
        ],
        "title": "Endpoint Properties",
        "type": "object",
      },
      "pattern": {
        "description": "Sets the optional ExchangePattern used to invoke this endpoint",
        "enum": [
          "InOnly",
          "InOut",
        ],
        "title": "Pattern",
        "type": "string",
      },
    },
    "title": "To",
    "type": "object",
  },
  "title": "to",
}
`;

exports[`CamelComponentSchemaService getVisualComponentSchema should transform a string-based \`ToD\` processor 1`] = `
{
  "definition": {
    "parameters": {
      "beanName": "myBean",
      "method": "hello",
    },
    "uri": "bean",
  },
  "schema": {
    "additionalProperties": false,
    "description": "Sends the message to a dynamic endpoint",
    "properties": {
      "allowOptimisedComponents": {
        "description": "Whether to allow components to optimise toD if they are org.apache.camel.spi.SendDynamicAware .",
        "title": "Allow Optimised Components",
        "type": "boolean",
      },
      "autoStartComponents": {
        "description": "Whether to auto startup components when toD is starting up.",
        "title": "Auto Start Components",
        "type": "boolean",
      },
      "cacheSize": {
        "description": "Sets the maximum size used by the org.apache.camel.spi.ProducerCache which is used to cache and reuse producers when using this recipient list, when uris are reused. Beware that when using dynamic endpoints then it affects how well the cache can be utilized. If each dynamic endpoint is unique then its best to turn off caching by setting this to -1, which allows Camel to not cache both the producers and endpoints; they are regarded as prototype scoped and will be stopped and discarded after use. This reduces memory usage as otherwise producers/endpoints are stored in memory in the caches. However if there are a high degree of dynamic endpoints that have been used before, then it can benefit to use the cache to reuse both producers and endpoints and therefore the cache size can be set accordingly or rely on the default size (1000). If there is a mix of unique and used before dynamic endpoints, then setting a reasonable cache size can help reduce memory usage to avoid storing too many non frequent used producers.",
        "title": "Cache Size",
        "type": "number",
      },
      "description": {
        "description": "Sets the description of this node",
        "title": "Description",
        "type": "string",
      },
      "disabled": {
        "description": "Whether to disable this EIP from the route during build time. Once an EIP has been disabled then it cannot be enabled later at runtime.",
        "title": "Disabled",
        "type": "boolean",
      },
      "id": {
        "description": "Sets the id of this node",
        "title": "Id",
        "type": "string",
      },
      "ignoreInvalidEndpoint": {
        "description": "Whether to ignore invalid endpoint URIs and skip sending the message.",
        "title": "Ignore Invalid Endpoint",
        "type": "boolean",
      },
      "parameters": {
        "description": "Endpoint properties description",
        "properties": {
          "beanName": {
            "deprecated": false,
            "description": "Sets the name of the bean to invoke",
            "title": "Bean Name",
            "type": "string",
          },
          "lazyStartProducer": {
            "default": false,
            "deprecated": false,
            "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
            "title": "Lazy Start Producer",
            "type": "boolean",
          },
          "method": {
            "deprecated": false,
            "description": "Sets the name of the method to invoke on the bean",
            "title": "Method",
            "type": "string",
          },
          "parameters": {
            "deprecated": false,
            "description": "Used for configuring additional properties on the bean",
            "title": "Parameters",
            "type": "object",
          },
          "scope": {
            "default": "Singleton",
            "deprecated": false,
            "description": "Scope of bean. When using singleton scope (default) the bean is created or looked up only once and reused for the lifetime of the endpoint. The bean should be thread-safe in case concurrent threads is calling the bean at the same time. When using request scope the bean is created or looked up once per request (exchange). This can be used if you want to store state on a bean while processing a request and you want to call the same bean instance multiple times while processing the request. The bean does not have to be thread-safe as the instance is only called from the same request. When using prototype scope, then the bean will be looked up or created per call. However in case of lookup then this is delegated to the bean registry such as Spring or CDI (if in use), which depends on their configuration can act as either singleton or prototype scope. so when using prototype then this depends on the delegated registry.",
            "enum": [
              "Singleton",
              "Request",
              "Prototype",
            ],
            "title": "Scope",
            "type": "string",
          },
        },
        "required": [
          "beanName",
        ],
        "title": "Endpoint Properties",
        "type": "object",
      },
      "pattern": {
        "description": "Sets the optional ExchangePattern used to invoke this endpoint",
        "enum": [
          "InOnly",
          "InOut",
        ],
        "title": "Pattern",
        "type": "string",
      },
      "uri": {
        "description": "The uri of the endpoint to send to. The uri can be dynamic computed using the org.apache.camel.language.simple.SimpleLanguage expression.",
        "title": "Uri",
        "type": "string",
      },
    },
    "title": "To D",
    "type": "object",
  },
  "title": "toD",
}
`;
