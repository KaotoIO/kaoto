<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>io.kaoto</groupId>
    <artifactId>kaoto-camel-catalog-parent</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath>
  </parent>
  <artifactId>kaoto-camel-catalog</artifactId>
  <packaging>pom</packaging>
  <name>kaoto-camel-catalog</name>
  <description>
    The Kaoto catalog collection generated from the Apache Camel catalog and YAML DSL schema.
  </description>
  <url>https://kaoto.io</url>

  <properties>
    <inputDirectory>${project.build.directory}/camel</inputDirectory>
    <outputDirectory>${project.build.directory}/../../dist</outputDirectory>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-yaml-dsl-deserializers</artifactId>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.dataformat</groupId>
      <artifactId>jackson-dataformat-yaml</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>${version.maven-dependency-plugin}</version>
        <executions>
          <execution>
            <id>Unpack Camel Artifacts</id>
            <phase>process-sources</phase>
            <goals>
              <goal>unpack</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <artifactItems>
            <artifactItem>
              <groupId>org.apache.camel.kamelets</groupId>
              <artifactId>camel-kamelets</artifactId>
              <version>${version.camel-kamelets}</version>
              <outputDirectory>${inputDirectory}</outputDirectory>
              <includes>kamelets/*</includes>
            </artifactItem>
            <artifactItem>
              <groupId>org.apache.camel.k</groupId>
              <artifactId>camel-k-crds</artifactId>
              <version>${version.camel-k-crds}</version>
              <outputDirectory>${inputDirectory}/crds</outputDirectory>
              <includes>
                camel.apache.org_integrations.yaml,
                camel.apache.org_kameletbindings.yaml,
                camel.apache.org_kamelets.yaml,
                camel.apache.org_pipes.yaml
              </includes>
            </artifactItem>
          </artifactItems>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <id>Download Kubernetes API OpenAPI v3 Specification</id>
            <phase>process-sources</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <get src="https://raw.githubusercontent.com/kubernetes/kubernetes/master/api/openapi-spec/v3/api__v1_openapi.json"
                     dest="${inputDirectory}/schema/kubernetes-api-v1-openapi.json"
                     verbose="true"
                     usetimestamp="true"
                />
              </target>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.camel</groupId>
        <artifactId>camel-yaml-dsl-maven-plugin</artifactId>
        <executions>
          <!-- camelCase -->
          <execution>
            <id>generate-yaml-schema-camelCase</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>generate-yaml-schema</goal>
            </goals>
            <configuration>
              <kebabCase>false</kebabCase>
              <additionalProperties>false</additionalProperties>
              <outputFile>${inputDirectory}/schema/camelYamlDsl.json</outputFile>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>Copy additional schema files</id>
            <phase>process-sources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${inputDirectory}/schema</outputDirectory>
              <resources>
                <resource>
                  <directory>${basedir}/src/main/resources/schemas</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>Copy additional kamelet files</id>
            <phase>process-sources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${inputDirectory}/kamelets</outputDirectory>
              <resources>
                <resource>
                  <directory>${basedir}/src/main/resources/kamelets</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>io.kaoto</groupId>
        <artifactId>kaoto-camel-catalog-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>Tailor Camel catalog and schema files for Kaoto</id>
            <phase>process-sources</phase>
            <goals>
              <goal>generate-kaoto-camel-catalog</goal>
            </goals>
            <configuration>
              <inputDirectory>${inputDirectory}</inputDirectory>
              <outputDirectory>${outputDirectory}</outputDirectory>
              <camelVersion>${version.camel}</camelVersion>
              <camelKCRDVersion>${version.camel-k-crds}</camelKCRDVersion>
              <kameletsVersion>${version.camel-kamelets}</kameletsVersion>
              <generateSubSchema>true</generateSubSchema>
              <kubernetesDefinitions>
                <kubernetesDefinition>io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta</kubernetesDefinition>
                <kubernetesDefinition>io.k8s.api.core.v1.ObjectReference</kubernetesDefinition>
              </kubernetesDefinitions>
              <additionalSchemas>
                <!--
                     ATM Camel K doesn't provide schema for Pipe ErrorHandler.
                     so we create a custom one and hold it here for now.
                -->
                <additionalSchema>${inputDirectory}/schema/PipeErrorHandler.json</additionalSchema>
                <additionalSchema>${inputDirectory}/schema/KameletConfiguration.json</additionalSchema>
              </additionalSchemas>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <executions>
          <execution>
            <id>testCompile</id>
            <goals>
              <goal>testCompile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <executions>
          <execution>
            <id>test</id>
            <goals>
              <goal>test</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
